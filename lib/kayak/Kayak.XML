<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kayak</name>
    </assembly>
    <members>
        <member name="T:Kayak.DotNetServer">
            <summary>
            DotNetServer is a simple IKayakServer implementation using `System.Net.Sockets.Socket`.
            
            `ISocket` values are yielded on `ThreadPool` threads as determined by the Socket object. 
            The operations that these `ISocket` values expose yield on `ThreadPool` threads
            as well. Thus, you must take care to synchronize resources shared by concurrent requests.
            </summary>
        </member>
        <member name="M:Kayak.DotNetServer.#ctor">
            <summary>
            Constructs a server which binds to port 8080 on all interfaces upon subscription
            and maintains a default connection backlog count.
            </summary>
        </member>
        <member name="M:Kayak.DotNetServer.#ctor(System.Net.IPEndPoint)">
            <summary>
            Constructs a server which binds to the given local end point upon subscription
            and maintains a default connection backlog count.
            </summary>
        </member>
        <member name="M:Kayak.DotNetServer.#ctor(System.Net.IPEndPoint,System.Int32)">
            <summary>
            Constructs a server which binds to the given local end point upon subscription
            and maintains the given connection backlog count.
            </summary>
        </member>
        <member name="T:Kayak.ISocket">
            <summary>
            Represents a socket which supports asynchronous IO operations.
            </summary>
        </member>
        <member name="M:Kayak.ISocket.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns an observable which, upon subscription, begins an asynchronous write
            operation. When the operation completes, the observable yields the number of
            bytes written and completes.
            </summary>
        </member>
        <member name="M:Kayak.ISocket.WriteFile(System.String)">
            <summary>
            Returns an observable which, upon subscription, begins copying a file
            to the socket. When the copy operation completes, the observable completes.
            </summary>
        </member>
        <member name="M:Kayak.ISocket.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns an observable which, upon subscription, begins an asynchronous read
            operation. When the operation completes, the observable yields the number of
            bytes read and completes.
            </summary>
        </member>
        <member name="P:Kayak.ISocket.RemoteEndPoint">
            <summary>
            The IP end point of the connected peer.
            </summary>
        </member>
        <member name="M:Kayak.Extensions.BufferHeaders(Kayak.ISocket)">
            <summary>
            Buffers HTTP headers from a socket. The last ArraySegment in the list is any
            data beyond headers which was read, which may be of zero length.
            </summary>
        </member>
        <member name="T:Kayak.HttpRequestLine">
            <summary>
            Represents the first line of an HTTP request. Used when constructing a `KayakRequest`.
            </summary>
        </member>
        <member name="F:Kayak.HttpRequestLine.Verb">
            <summary>
            The verb component of the request line (e.g., GET, POST, etc).
            </summary>
        </member>
        <member name="F:Kayak.HttpRequestLine.RequestUri">
            <summary>
            The request URI component of the request line (e.g., /path/and?query=string).
            </summary>
        </member>
        <member name="F:Kayak.HttpRequestLine.HttpVersion">
            <summary>
            The HTTP version component of the request line (e.g., HTTP/1.0).
            </summary>
        </member>
    </members>
</doc>
